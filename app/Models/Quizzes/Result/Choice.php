<?php

namespace App\Models\Quizzes\Result;

use App\Models\Model;
use Illuminate\Database\Eloquent\Builder as QueryBuilder;

/**
 * Class Choice
 *
 * @package App\Models\Result
 *
 * @property string $id          Unique ID generated by the system on creation.
 * @property string $choice_id   The choice ID of the question from Quiz.
 * @property string $choice_name The choice of the question.
 * @property string $choice_html The choice of the question.
 * @property int    $is_correct  An attribute if the choice is a correct answer.
 * @property int    $points      Points earned when selected as the correct choice.
 * @property string $result_id   The Result ID
 * @property string $section_id  The Section ID
 * @property string $passage_id  The Passage ID
 * @property string $question_id The Question ID.
 * @property int    $ordering    The sort order.
 * @property string $letter      Assigned letter.
 *
 * @method static Choice find(int $id)
 * @method static Choice findOrFail(int $id)
 * @method static Choice first()
 *
 * @method static QueryBuilder ofQuestion(string $id)
 * @method static QueryBuilder correct(string $id)
 */
class Choice extends Model
{

    const PATH = '';
    const SLUG = 'choice';

    protected $table = 'quizzes_results_choices';

    protected $casts = [
        'is_correct' => 'boolean',
        'created_at' => 'datetime',
        'updated_at' => 'datetime',
        'deleted_at' => 'datetime',
    ];

    protected $fillable = [
        'letter',
        'choice',
        'is_correct',
        'points',
        'ordering',
    ];

    protected $hidden = [
        'question_id',
        'created_at',
        'updated_at',
        'deleted_at',
    ];

    /**
     * Scope a query to specify sections of a given Question ID.
     *
     * @param  QueryBuilder $query
     * @param  string       $questionId
     *
     * @return QueryBuilder
     */
    public function scopeOfQuestion($query, $questionId)
    {
        return $query->where('question_id', '=', $questionId);
    }

    /**
     * Scope a query to get the correct answers of a given Question ID.
     *
     * @param QueryBuilder $query
     * @param int          $questionId
     *
     * @return QueryBuilder
     */
    public function scopeCorrect($query, $questionId)
    {
        return $query->where('question_id', '=', $questionId)->where('is_correct', '=', 1);

    }
}