/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 27);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@babel/runtime/regenerator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! regenerator-runtime */ \"./node_modules/regenerator-runtime/runtime.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanM/YTM0YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIsbUJBQU8sQ0FBQywwRUFBcUIiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWdlbmVyYXRvci1ydW50aW1lXCIpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/regenerator/index.js\n");

/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n   true ? module.exports : undefined\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/regenerator-runtime/runtime.js\n");

/***/ }),

/***/ "./resources/js/components/quizzes/takerquizzes/questionnaire.js":
/*!***********************************************************************!*\
  !*** ./resources/js/components/quizzes/takerquizzes/questionnaire.js ***!
  \***********************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ \"./node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);\n\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nnew Vue({\n  el: '#component',\n  data: {\n    name: {\n      singular: 'TakerQuiz',\n      plural: 'TakerQuizzes'\n    },\n    loading: {\n      sections: false,\n      passages: false,\n      questions: false\n    },\n    keys: {\n      section: {\n        description: _.uniqueId('_')\n      },\n      passage: {\n        description: _.uniqueId('_'),\n        content: _.uniqueId('_')\n      },\n      question: {\n        description: _.uniqueId('_')\n      },\n      choice: {\n        choice: _.uniqueId('_')\n      }\n    },\n    submitting: false,\n    url: {\n      path: '/quizzes/takerquizzes'\n    },\n    config: {\n      description: {\n        height: 350,\n        menubar: false,\n        branding: false,\n        plugins: ['lists link image charmap anchor', 'table paste help wordcount', 'code'],\n        toolbar: 'bold italic under strikethrough | superscript subscript | bullist numlist outdent indent | link image charmap | removeformat | help | code',\n        convert_urls: false,\n        file_picker_callback: function file_picker_callback(callback, value, meta) {\n          tinymce.activeEditor.windowManager.openUrl({\n            title: 'Media Manager',\n            url: '/mediamanager/modal',\n            onMessage: function onMessage(api, data) {\n              callback(data.url, {\n                alt: 'Image',\n                'data-media-id': data.id\n              });\n              api.close();\n            }\n          });\n        }\n      },\n      content: {\n        height: 400,\n        menubar: false,\n        branding: false,\n        plugins: ['lists link image charmap anchor', 'table paste help wordcount', 'code'],\n        toolbar: 'bold italic under strikethrough | superscript subscript | bullist numlist outdent indent | link image charmap | table | removeformat | help | code',\n        file_picker_callback: function file_picker_callback(callback, value, meta) {\n          tinymce.activeEditor.windowManager.openUrl({\n            title: 'Media Manager',\n            url: '/mediamanager/modal',\n            onMessage: function onMessage(api, data) {\n              callback(data.url, {\n                alt: 'Image',\n                'data-media-id': data.id\n              });\n              api.close();\n            }\n          });\n        },\n        relative_urls: false,\n        remove_script_host: false,\n        convert_urls: true,\n        content_css: '/css/frontend-tinymce.css'\n      },\n      question: {\n        height: 350,\n        menubar: false,\n        branding: false,\n        plugins: ['lists link image charmap anchor', 'media table paste help wordcount', 'code'],\n        toolbar: 'bold italic underline strikethrough | superscript subscript | bullist numlist outdent indent | media link image charmap | removeformat | help | code',\n        file_picker_callback: function file_picker_callback(callback, value, meta) {\n          var url = '/mediamanager/modal';\n\n          if (meta.filetype === 'image') {\n            url += '/image';\n          }\n\n          if (meta.filetype === 'media') {\n            url += '/video';\n          }\n\n          tinymce.activeEditor.windowManager.openUrl({\n            title: 'Media Manager',\n            url: url,\n            onMessage: function onMessage(api, data) {\n              callback(data.url, {\n                alt: 'Image',\n                'data-media-id': data.id\n              });\n              api.close();\n            }\n          });\n        },\n        relative_urls: false,\n        remove_script_host: false,\n        convert_urls: true,\n        content_css: '/css/frontend-tinymce.css'\n      },\n      choice: {\n        height: 250,\n        menubar: false,\n        branding: false,\n        plugins: ['lists link image charmap anchor', 'table paste help wordcount', 'code'],\n        toolbar: 'bold italic underline strikethrough | superscript subscript | bullist numlist outdent indent | link image charmap | removeformat | help | code',\n        file_picker_callback: function file_picker_callback(callback, value, meta) {\n          tinymce.activeEditor.windowManager.openUrl({\n            title: 'Media Manager',\n            url: '/mediamanager/modal',\n            onMessage: function onMessage(api, data) {\n              callback(data.url, {\n                alt: 'Image',\n                'data-media-id': data.id\n              });\n              api.close();\n            }\n          });\n        },\n        relative_urls: false,\n        remove_script_host: false,\n        convert_urls: true,\n        content_css: '/css/frontend-tinymce.css'\n      }\n    },\n    selections: {\n      question_types: [{\n        id: 1,\n        name: 'Multiple choice, single answer'\n      }, //{\n      //    id: 2,\n      //    name: 'Multiple choice, multiple answers',\n      //},\n      //{\n      //    id: 3,\n      //    name: 'Text, short',\n      //},\n      //{\n      //    id: 4,\n      //    name: 'Text, long',\n      //},\n      //{\n      //    id: 5,\n      //    name: 'Order of answers',\n      //},\n      {\n        id: 6,\n        name: 'Student Provided responses'\n      }]\n    },\n    current: {\n      section: {\n        id: '',\n        name: '',\n        description: '',\n        passages: []\n      },\n      passage: {\n        id: '',\n        name: '',\n        description: '',\n        content: '',\n        questions: []\n      },\n      question: {\n        id: '',\n        question: '',\n        type: {\n          id: 1,\n          name: 'Multiple choice, single answer'\n        },\n        problem_types: [],\n        points: 0,\n        difficulty: 1,\n        choices: [{\n          ud: _.uniqueId('_'),\n          td: _.uniqueId('td-'),\n          id: '',\n          choice: '',\n          is_correct: 0,\n          points: 0\n        }]\n      },\n      mmtarget: ''\n    },\n    quiz: {\n      id: '',\n      name: '',\n      description: '',\n      sections: []\n    },\n    section: {\n      types: {\n        url: '/quizzes/types/sections/list',\n        items: []\n      },\n      tags: {\n        url: '/quizzes/types/problems/list',\n        items: []\n      }\n    },\n    question_layouts: [{\n      value: 'nqa',\n      text: 'Question and Answer Only'\n    }, {\n      value: 'pqa',\n      text: 'Passage | Question and Answer'\n    }]\n  },\n  created: function created() {\n    var that = this;\n    window.addEventListener('message', function (event) {\n      if (that.current.mmtarget === 'explain-video') {\n        that.current.question.explain_video = event.data.url;\n        that.$bvModal.hide('mediamanager-modal');\n      }\n    }, false);\n  },\n  beforeMount: function beforeMount() {\n    var that = this;\n    that.quiz = Quiz;\n    axios({\n      method: 'GET',\n      url: that.section.types.url + '?l=0'\n    }).then(function (data) {\n      that.section.types.items = data.data;\n    });\n    axios({\n      method: 'GET',\n      url: that.section.tags.url + '?l=0'\n    }).then(function (data) {\n      that.section.tags.items = data.data;\n    });\n    that.refreshSections();\n  },\n  mounted: function mounted() {\n    var that = this;\n    that.$root.$on('bv::modal::shown', function (bvEvent, modalId) {\n      switch (modalId) {\n        case 'section-form-modal':\n          that.keys.section.description = _.uniqueId('_');\n          break;\n\n        case 'passage-form-modal':\n          that.keys.passage.description = _.uniqueId('_');\n          that.keys.passage.content = _.uniqueId('_');\n          break;\n\n        case 'question-form-modal':\n          that.keys.question.description = _.uniqueId('_');\n\n          for (var i = 0; i < that.current.question.choices.length; i++) {\n            that.current.question.choices[i].ud = _.uniqueId('_');\n            that.current.question.choices[i].td = _.uniqueId('td-');\n          }\n\n          break;\n      }\n    });\n    document.addEventListener('focusin', function (e) {\n      var closest = e.target.closest('.tox-tinymce-aux, .tox-dialog, .moxman-window, .tam-assetmanager-root');\n\n      if (closest !== null && closest !== undefined) {\n        e.stopImmediatePropagation();\n      }\n    });\n  },\n  methods: {\n    openSectionFormModal: function openSectionFormModal(section) {\n      if (section === undefined || section === null) {\n        this.current.section = {\n          id: '',\n          name: '',\n          description: '',\n          passages: []\n        };\n      } else {\n        this.current.section = section;\n        this.current.section.passages = [];\n      }\n\n      this.$bvModal.show('section-form-modal');\n    },\n    selectSection: function selectSection(section) {\n      this.current.section = section;\n      this.current.section.passages = [];\n      this.current.passage = {\n        id: '',\n        name: '',\n        description: '',\n        content: '',\n        questions: []\n      };\n      this.current.question = {\n        id: '',\n        question: '',\n        type: '',\n        points: 0,\n        difficulty: 1,\n        choices: [{\n          ud: _.uniqueId('_'),\n          id: '',\n          choice: '',\n          is_correct: 0,\n          points: 0\n        }]\n      };\n      this.refreshPassages();\n    },\n    refreshSections: function refreshSections() {\n      var that = this;\n      that.loading.sections = true;\n      axios({\n        method: 'GET',\n        url: that.url.path + '/' + that.quiz.id + '/' + 'sections?l=0'\n      }).then(function (response) {\n        that.quiz.sections = response.data;\n        that.loading.sections = false;\n      })[\"catch\"](function (error) {\n        var content = 'Failed to load the Sections. Reason: ';\n        that.$bvToast.toast(content, {\n          title: 'Error',\n          variant: 'danger',\n          solid: true\n        });\n        that.loading.sections = false;\n      });\n    },\n    sortSections: function sortSections(event) {\n      var that = this;\n      that.quiz.sections.splice(event.newIndex, 0, that.quiz.sections.splice(event.oldIndex, 1)[0]);\n      that.quiz.sections.forEach(function (item, index) {\n        if (item !== undefined) {\n          item.ordering = index;\n        }\n      });\n      axios({\n        method: 'PUT',\n        url: that.url.path + '/' + that.quiz.id + '/' + 'sections',\n        data: {\n          action: 'sort',\n          sections: that.quiz.sections\n        }\n      }).then(function () {\n        var content = 'Sections has been sorted.';\n        that.$bvToast.toast(content, {\n          title: 'Success',\n          variant: 'success',\n          solid: true\n        });\n      })[\"catch\"](function (error) {\n        var content = 'Failed to sort the Sections. Reason: ' + error.response.data.reason;\n        that.$bvToast.toast(content, {\n          title: 'Error',\n          variant: 'danger',\n          solid: true\n        });\n      });\n    },\n    onSubmitSection: function onSubmitSection(event) {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee() {\n        var message, result, content, title, variant, modalHide;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                message = {};\n                _context.prev = 1;\n                event.preventDefault();\n                _this.submitting = true;\n                _context.next = 6;\n                return _this.$validator.validateAll('section');\n\n              case 6:\n                result = _context.sent;\n\n                if (!result) {\n                  _context.next = 18;\n                  break;\n                }\n\n                _context.next = 10;\n                return axios({\n                  method: _this.current.section.id !== '' ? 'PUT' : 'POST',\n                  url: _this.url.path + '/' + _this.quiz.id + '/' + 'sections' + (_this.current.section.id !== '' ? '/' + _this.current.section.id : ''),\n                  data: _this.current.section\n                });\n\n              case 10:\n                _this.refreshSections();\n\n                message.content = \"Section has been \".concat(!!_this.current.section.id ? 'updated' : 'created', \".\");\n                message.title = 'Success';\n                message.variant = 'success';\n                message.modalHide = true;\n                _this.current.section = {\n                  id: '',\n                  name: '',\n                  description: '',\n                  passages: []\n                };\n                _context.next = 21;\n                break;\n\n              case 18:\n                message.content = 'Validation failed. Please check the form.';\n                message.title = 'Error';\n                message.variant = 'danger';\n\n              case 21:\n                _context.next = 30;\n                break;\n\n              case 23:\n                _context.prev = 23;\n                _context.t0 = _context[\"catch\"](1);\n                message.content = 'Failed to submit the Section.';\n                message.title = 'Error';\n                message.variant = 'danger';\n                message.modalHide = true;\n                _this.current.section = {\n                  id: '',\n                  name: '',\n                  description: ''\n                };\n\n              case 30:\n                _context.prev = 30;\n                content = message.content, title = message.title, variant = message.variant, modalHide = message.modalHide;\n\n                if (content) {\n                  _this.$bvToast.toast(content, {\n                    title: title,\n                    variant: variant,\n                    solid: true\n                  });\n                }\n\n                if (modalHide) {\n                  _this.$bvModal.hide('section-form-modal');\n                }\n\n                _this.submitting = false;\n                return _context.finish(30);\n\n              case 36:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 23, 30, 36]]);\n      }))();\n    },\n    openConfirmDeleteSectionModal: function openConfirmDeleteSectionModal(section) {\n      this.current.section = section;\n      this.$bvModal.show('section-delete-modal');\n    },\n    deleteSection: function deleteSection(section) {\n      var that = this;\n      that.submitting = true;\n      axios({\n        method: 'DELETE',\n        url: that.url.path + '/' + that.quiz.id + '/' + 'sections' + '/' + section.id\n      }).then(function () {\n        that.current.section = {\n          id: '',\n          name: '',\n          description: '',\n          passages: []\n        };\n        that.refreshSections();\n        that.submitting = false;\n        var content = 'Section has been deleted.';\n        that.$bvToast.toast(content, {\n          title: 'Success',\n          variant: 'success',\n          solid: true\n        });\n      })[\"catch\"](function () {\n        that.submitting = false;\n        var content = 'Failed to delete the Section.';\n        that.$bvToast.toast(content, {\n          title: 'Error',\n          variant: 'danger',\n          solid: true\n        });\n      });\n    },\n    openPassageFormModal: function openPassageFormModal(passage) {\n      if (passage === undefined || passage === null) {\n        this.current.passage = {\n          id: '',\n          name: '',\n          description: '',\n          content: '',\n          questions: []\n        };\n      } else {\n        this.current.passage = passage;\n        this.current.passage.questions = [];\n      }\n\n      this.$bvModal.show('passage-form-modal');\n    },\n    selectPassage: function selectPassage(passage) {\n      this.current.passage = passage;\n      this.current.passage.questions = [];\n      this.current.question = {\n        id: '',\n        question: '',\n        type: '',\n        points: 0,\n        difficulty: 1,\n        choices: [{\n          ud: _.uniqueId('_'),\n          id: '',\n          choice: '',\n          is_correct: 0,\n          points: 0\n        }]\n      };\n      this.refreshQuestions();\n    },\n    refreshPassages: function refreshPassages() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee2() {\n        var message, _yield$axios, data, content, title, variant;\n\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                message = {};\n                _context2.prev = 1;\n                _this2.loading.passages = true;\n                _context2.next = 5;\n                return axios({\n                  method: 'GET',\n                  url: _this2.url.path + '/' + _this2.quiz.id + '/' + 'sections' + '/' + _this2.current.section.id + '/' + 'passages?l=0'\n                });\n\n              case 5:\n                _yield$axios = _context2.sent;\n                data = _yield$axios.data;\n                _this2.current.section.passages = data;\n                _context2.next = 16;\n                break;\n\n              case 10:\n                _context2.prev = 10;\n                _context2.t0 = _context2[\"catch\"](1);\n                console.log(_context2.t0);\n                message.content = 'Failed to load the Passages.';\n                message.title = 'Error';\n                message.variant = 'danger';\n\n              case 16:\n                _context2.prev = 16;\n                _this2.loading.passages = false;\n                content = message.content, title = message.title, variant = message.variant;\n\n                if (content) {\n                  _this2.$bvToast.toast(content, {\n                    title: title,\n                    variant: variant,\n                    solid: true\n                  });\n                }\n\n                return _context2.finish(16);\n\n              case 21:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[1, 10, 16, 21]]);\n      }))();\n    },\n    sortPassages: function sortPassages(event) {\n      var that = this;\n      that.current.section.passages.splice(event.newIndex, 0, that.current.section.passages.splice(event.oldIndex, 1)[0]);\n      that.current.section.passages.forEach(function (item, index) {\n        if (item !== undefined) {\n          item.ordering = index;\n        }\n      });\n      axios({\n        method: 'PUT',\n        url: that.url.path + '/' + that.quiz.id + '/' + 'sections' + '/' + that.current.section.id + '/' + 'passages',\n        data: {\n          action: 'sort',\n          passages: that.current.section.passages\n        }\n      }).then(function (response) {\n        var content = 'Passages has been sorted.';\n        that.$bvToast.toast(content, {\n          title: 'Success',\n          variant: 'success',\n          solid: true\n        });\n      })[\"catch\"](function (error) {\n        var content = 'Failed to sort the Passages. Reason: ' + error.response.data.reason;\n        that.$bvToast.toast(content, {\n          title: 'Error',\n          variant: 'danger',\n          solid: true\n        });\n      });\n    },\n    submitPassage: function submitPassage(event) {\n      var that = this;\n      that.submitting = true;\n      this.$validator.validateAll('passage').then(function (result) {\n        if (result) {\n          axios({\n            method: that.current.passage.id !== '' ? 'PUT' : 'POST',\n            url: that.url.path + '/' + that.quiz.id + '/sections/' + that.current.section.id + '/' + 'passages' + (that.current.passage.id !== '' ? '/' + that.current.passage.id : ''),\n            data: that.current.passage\n          }).then(function () {\n            that.refreshPassages();\n            jQuery('#passage-form-modal').modal('hide');\n            var content = 'Passage has been ' + (that.current.passage.id !== '' ? 'updated' : 'created') + '.';\n            that.$bvToast.toast(content, {\n              title: 'Success',\n              variant: 'success',\n              solid: true\n            });\n            that.submitting = false;\n            that.current.passage = {\n              id: '',\n              name: '',\n              description: '',\n              content: '',\n              questions: []\n            };\n            event.preventDefault();\n          })[\"catch\"](function () {\n            jQuery('#passage-form-modal').modal('hide');\n            var content = 'Failed to submit the Passage.';\n            that.$bvToast.toast(content, {\n              title: 'Error',\n              variant: 'danger',\n              solid: true\n            });\n            that.submitting = false;\n            that.current.passage = {\n              id: '',\n              name: '',\n              description: ''\n            };\n            event.preventDefault();\n          });\n        } else {\n          that.submitting = false;\n          event.preventDefault();\n        }\n      })[\"catch\"](function () {\n        var content = 'Validation failed. Please check the form.';\n        that.$bvToast.toast(content, {\n          title: 'Error',\n          variant: 'danger',\n          solid: true\n        });\n        that.submitting = false;\n        event.preventDefault();\n      });\n    },\n    openConfirmDeletePassageModal: function openConfirmDeletePassageModal(passage) {\n      this.current.passage = passage;\n      this.$bvModal.show('passage-delete-modal');\n    },\n    deletePassage: function deletePassage(passage) {\n      var that = this;\n      that.submitting = true;\n      axios({\n        method: 'DELETE',\n        url: that.url.path + '/' + that.quiz.id + '/' + 'sections' + '/' + that.current.section.id + '/' + 'passages' + '/' + passage.id\n      }).then(function () {\n        that.current.passage = {\n          id: '',\n          name: '',\n          description: '',\n          content: '',\n          questions: []\n        };\n        that.refreshPassages();\n        jQuery('#passage-delete-modal').modal('hide');\n        that.submitting = false;\n        var content = 'Passage has been deleted.';\n        that.$bvToast.toast(content, {\n          title: 'Success',\n          variant: 'success',\n          solid: true\n        });\n      })[\"catch\"](function () {\n        jQuery('#passage-delete-modal').modal('hide');\n        that.submitting = false;\n        var content = 'Failed to delete the Passage.';\n        that.$bvToast.toast(content, {\n          title: 'Error',\n          variant: 'danger',\n          solid: true\n        });\n      });\n    },\n    openQuestionFormModal: function openQuestionFormModal(question) {\n      if (question === undefined || question === null) {\n        this.current.question = {\n          id: '',\n          question: '',\n          type: {\n            id: 1,\n            name: 'Multiple choice, single answer'\n          },\n          points: 1,\n          difficulty: 1,\n          choices: [{\n            ud: _.uniqueId('_'),\n            id: '',\n            choice: '',\n            is_correct: 0,\n            points: 0\n          }]\n        };\n      } else {\n        this.current.question = question;\n      }\n\n      this.$bvModal.show('question-form-modal');\n    },\n    refreshQuestions: function refreshQuestions() {\n      var that = this;\n      that.loading.questions = true;\n      var url = that.url.path + '/' + that.quiz.id + '/' + 'sections' + '/' + that.current.section.id + '/' + 'passages' + '/' + that.current.passage.id + '/' + 'questions?l=0';\n      axios({\n        method: 'GET',\n        url: url\n      }).then(function (response) {\n        that.current.passage.questions = response.data;\n        that.loading.questions = false;\n      })[\"catch\"](function () {\n        var content = 'Failed to load the Questions.';\n        that.$bvToast.toast(content, {\n          title: 'Error',\n          variant: 'danger',\n          solid: true\n        });\n        that.loading.questions = false;\n      });\n    },\n    sortQuestions: function sortQuestions(event) {\n      var that = this;\n      that.current.passage.questions.splice(event.newIndex, 0, that.current.passage.questions.splice(event.oldIndex, 1)[0]);\n      that.current.passage.questions.forEach(function (item, index) {\n        if (item !== undefined) {\n          item.ordering = index;\n        }\n      });\n      var url = that.url.path + '/' + that.quiz.id + '/' + 'sections' + '/' + that.current.section.id + '/' + 'passages' + '/' + that.current.passage.id + '/' + 'questions';\n      axios({\n        method: 'PUT',\n        url: url,\n        data: {\n          action: 'sort',\n          questions: that.current.passage.questions\n        }\n      }).then(function (response) {\n        var content = 'Questions has been sorted.';\n        that.$bvToast.toast(content, {\n          title: 'Success',\n          variant: 'success',\n          solid: true\n        });\n      })[\"catch\"](function (error) {\n        var content = 'Failed to sort the Questions. Reason: ' + error.response.data.reason;\n        that.$bvToast.toast(content, {\n          title: 'Error',\n          variant: 'danger',\n          solid: true\n        });\n      });\n    },\n    submitQuestion: function submitQuestion(event) {\n      var that = this;\n      that.submitting = true;\n      var url = that.url.path + '/' + that.quiz.id + '/' + 'sections' + '/' + that.current.section.id + '/' + 'passages' + '/' + that.current.passage.id + '/' + 'questions';\n      this.$validator.validateAll('question').then(function (result) {\n        if (result) {\n          axios({\n            method: that.current.question.id !== '' ? 'PUT' : 'POST',\n            url: url + (that.current.question.id !== '' ? '/' + that.current.question.id : ''),\n            data: that.current.question\n          }).then(function () {\n            that.refreshQuestions();\n            jQuery('#question-form-modal').modal('hide');\n            var content = 'Question has been ' + (that.current.question.id !== '' ? 'updated' : 'created') + '.';\n            that.$bvToast.toast(content, {\n              title: 'Success',\n              variant: 'success',\n              solid: true\n            });\n            that.submitting = false;\n            that.current.question = {\n              id: '',\n              question: '',\n              type: {\n                id: 1,\n                name: 'Multiple choice, single answer'\n              },\n              points: '',\n              difficulty: 1,\n              choices: [{\n                ud: _.uniqueId('_'),\n                id: '',\n                choice: '',\n                is_correct: 0,\n                points: 1\n              }]\n            };\n            event.preventDefault();\n          })[\"catch\"](function () {\n            jQuery('#question-form-modal').modal('hide');\n            var content = 'Failed to submit the Question.';\n            that.$bvToast.toast(content, {\n              title: 'Error',\n              variant: 'danger',\n              solid: true\n            });\n            that.submitting = false;\n            that.current.question = {\n              id: '',\n              question: '',\n              type: {\n                id: 1,\n                name: 'Multiple choice, single answer'\n              },\n              points: '',\n              difficulty: 1,\n              choices: [{\n                ud: _.uniqueId('_'),\n                id: '',\n                choice: '',\n                is_correct: 0,\n                points: 1\n              }]\n            };\n          });\n          event.preventDefault();\n        } else {\n          that.submitting = false;\n          event.preventDefault();\n        }\n      })[\"catch\"](function () {\n        var content = 'Validation failed. Please check the form.';\n        that.$bvToast.toast(content, {\n          title: 'Error',\n          variant: 'danger',\n          solid: true\n        });\n        that.submitting = false;\n        event.preventDefault();\n      });\n    },\n    openConfirmDeleteQuestionModal: function openConfirmDeleteQuestionModal(question) {\n      this.current.question = question;\n      this.$bvModal.show('question-delete-modal');\n    },\n    deleteQuestion: function deleteQuestion(question) {\n      var that = this;\n      that.submitting = true;\n      var url = that.url.path + '/' + that.quiz.id + '/' + 'sections' + '/' + that.current.section.id + '/' + 'passages' + '/' + that.current.passage.id + '/' + 'questions' + '/' + question.id;\n      axios({\n        method: 'DELETE',\n        url: url\n      }).then(function () {\n        that.current.question = {\n          id: '',\n          question: '',\n          type: {\n            id: 1,\n            name: 'Multiple choice, single answer'\n          },\n          points: '',\n          difficulty: 1,\n          choices: [{\n            ud: _.uniqueId('_'),\n            id: '',\n            choice: '',\n            is_correct: false,\n            points: 0\n          }]\n        };\n        that.refreshQuestions();\n        jQuery('#question-delete-modal').modal('hide');\n        that.submitting = false;\n        var content = 'Question has been deleted.';\n        that.$bvToast.toast(content, {\n          title: 'Success',\n          variant: 'success',\n          solid: true\n        });\n      })[\"catch\"](function () {\n        jQuery('#question-delete-modal').modal('hide');\n        that.submitting = false;\n        var content = 'Failed to delete the Question.';\n        that.$bvToast.toast(content, {\n          title: 'Error',\n          variant: 'danger',\n          solid: true\n        });\n      });\n    },\n    addChoice: function addChoice() {\n      var emptyChoice = {\n        ud: _.uniqueId('_'),\n        td: _.uniqueId('td-'),\n        id: '',\n        choice: '',\n        is_correct: false,\n        points: 0\n      };\n      this.current.question.choices.push(emptyChoice);\n      setTimeout(function () {\n        tinymce.execCommand('mceFocus', false, emptyChoice.td);\n      }, 100);\n    },\n    deleteChoice: function deleteChoice(index) {\n      this.current.question.choices.splice(index, 1);\n    },\n    sortChoices: function sortChoices(event) {\n      var that = this;\n      that.current.question.choices.splice(event.newIndex, 0, that.current.question.choices.splice(event.oldIndex, 1)[0]);\n      that.current.question.choices.forEach(function (item, index) {\n        if (item !== undefined) {\n          item.ordering = index;\n        }\n      });\n    },\n    changePoints: function changePoints(event, choice) {\n      if (event === true) {\n        choice.points = 1;\n      } else {\n        choice.points = 0;\n      }\n    },\n    openMediaManager: function openMediaManager(target) {\n      this.current.mmtarget = target;\n      this.$bvModal.show('mediamanager-modal');\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/components/quizzes/takerquizzes/questionnaire.js\n");

/***/ }),

/***/ 27:
/*!*****************************************************************************!*\
  !*** multi ./resources/js/components/quizzes/takerquizzes/questionnaire.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! F:\Project\laravel\quizemaster\code\resources\js\components\quizzes\takerquizzes\questionnaire.js */"./resources/js/components/quizzes/takerquizzes/questionnaire.js");


/***/ })

/******/ });