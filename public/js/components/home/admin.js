/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 63);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@babel/runtime/regenerator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! regenerator-runtime */ \"./node_modules/regenerator-runtime/runtime.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanM/YTM0YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIsbUJBQU8sQ0FBQywwRUFBcUIiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWdlbmVyYXRvci1ydW50aW1lXCIpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/regenerator/index.js\n");

/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n   true ? module.exports : undefined\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/regenerator-runtime/runtime.js\n");

/***/ }),

/***/ "./resources/js/components/home/admin.js":
/*!***********************************************!*\
  !*** ./resources/js/components/home/admin.js ***!
  \***********************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ \"./node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);\n\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nnew Vue({\n  el: '#admin',\n  data: {\n    showbutton: false,\n    // test credits data\n    testcredits: {\n      name: {\n        singular: 'Test Credit',\n        plural: 'Test Credits'\n      },\n      url: {\n        path: {\n          collection: '/home/admin/test-credit'\n        }\n      },\n      loading: false,\n      submitting: false,\n      total: 0,\n      packages: {\n        items: []\n      },\n      testcredit: {\n        user_id: '',\n        package_type: null,\n        credit: 0\n      }\n    },\n    // credit use data\n    credituse: {\n      name: {\n        singular: 'Credit Use History',\n        plural: 'Credit Use Histories'\n      },\n      url: {\n        path: {\n          collection: '/home/admin/credit-use'\n        },\n        qs: ''\n      },\n      loading: false,\n      submitting: false,\n      query: {\n        keywords: '',\n        page: 1,\n        limit: parseInt(Settings['site.ipp.tabular'])\n      },\n      filters: {\n        form: {\n          plan: null\n        },\n        status: 0,\n        qs: ''\n      },\n      results: {\n        rows: [],\n        original: [],\n        total: {\n          records: 0,\n          pages: 0\n        }\n      }\n    },\n    // test giver\n    testgivers: {\n      name: {\n        singular: 'Test Giver',\n        plural: 'Test Givers'\n      },\n      url: {\n        path: {\n          collection: '/home/admin/test-giver'\n        },\n        qs: ''\n      },\n      loading: false,\n      submitting: false,\n      results: [],\n      testgiver: null,\n      new_testgiver: {\n        firstname: '',\n        lastname: '',\n        email: ''\n      }\n    },\n    // testtakers data\n    testtakers: {\n      name: {\n        singular: 'Test Taker',\n        plural: 'Test Takers'\n      },\n      url: {\n        path: {\n          collection: '/home/admin/test-taker'\n        },\n        qs: ''\n      },\n      loading: false,\n      submitting: false,\n      query: {\n        keywords: '',\n        page: 1,\n        limit: parseInt(Settings['site.ipp.tabular'])\n      },\n      filters: {\n        form: {\n          plan: null\n        },\n        status: 0,\n        qs: ''\n      },\n      results: {\n        rows: [],\n        original: [],\n        total: {\n          records: 0,\n          pages: 0\n        }\n      },\n      quiz: null,\n      quiz_testtaker: null,\n      quizzes: {\n        url: '/quizzes/quizzes/list',\n        items: []\n      },\n      testtaker: {\n        testgiver_user_id: '',\n        firstname: '',\n        lastname: '',\n        email: ''\n      }\n    },\n    // testpendings data\n    testpendings: {\n      name: {\n        singular: 'Test Pending',\n        plural: 'Test Pendings'\n      },\n      url: {\n        path: {\n          collection: '/home/admin/test-pending'\n        },\n        qs: ''\n      },\n      loading: false,\n      submitting: false,\n      query: {\n        keywords: '',\n        page: 1,\n        limit: parseInt(Settings['site.ipp.tabular'])\n      },\n      filters: {\n        form: {\n          plan: null\n        },\n        status: 0,\n        qs: ''\n      },\n      results: {\n        rows: [],\n        original: [],\n        total: {\n          records: 0,\n          pages: 0\n        }\n      }\n    },\n    // testresults data\n    testresults: {\n      name: {\n        singular: 'Test Result',\n        plural: 'Test Results'\n      },\n      url: {\n        path: {\n          collection: '/home/admin/test-result'\n        },\n        qs: ''\n      },\n      loading: false,\n      submitting: false,\n      query: {\n        keywords: '',\n        page: 1,\n        limit: parseInt(Settings['site.ipp.tabular'])\n      },\n      filters: {\n        form: {\n          plan: null\n        },\n        status: 0,\n        qs: ''\n      },\n      results: {\n        rows: [],\n        original: [],\n        total: {\n          records: 0,\n          pages: 0\n        }\n      }\n    }\n  },\n  watch: {\n    'testgivers.testgiver': function testgiversTestgiver(testgiver) {\n      var that = this;\n      that.testgivers.testgiver = testgiver;\n      that.getTestCredit();\n      that.creditUseClear();\n      that.testTakerClear();\n      that.testResultClear(); // display buttons\n\n      if (testgiver == null) {\n        that.showbutton = false;\n      } else {\n        that.showbutton = true;\n      }\n    }\n  },\n  created: function created() {\n    var that = this;\n    this.$validator.extend('unique', {\n      getMessage: function getMessage(field, params, data) {\n        return data.error;\n      },\n      validate: function () {\n        var _validate = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee(value, args) {\n          var params, ref;\n          return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  params = {\n                    field: args[0],\n                    value: value\n                  };\n                  _context.next = 3;\n                  return axios.post('/register/userdetails', params);\n\n                case 3:\n                  ref = _context.sent;\n\n                  if (!(ref.data.result === false)) {\n                    _context.next = 8;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\", true);\n\n                case 8:\n                  if (!(ref.data.data != '')) {\n                    _context.next = 13;\n                    break;\n                  }\n\n                  that.testtakers.testtaker.firstname = ref.data.data.given_name;\n                  that.testtakers.testtaker.lastname = ref.data.data.family_name;\n                  _context.next = 14;\n                  break;\n\n                case 13:\n                  return _context.abrupt(\"return\", {\n                    valid: false,\n                    data: {\n                      error: ref.data.message\n                    }\n                  });\n\n                case 14:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        function validate(_x, _x2) {\n          return _validate.apply(this, arguments);\n        }\n\n        return validate;\n      }()\n    });\n  },\n  beforeMount: function beforeMount() {\n    var that = this;\n    axios.get('/register/testgiverdetails').then(function (response) {\n      that.testgivers.testgiver = response.data;\n    });\n    that.getTestCredit();\n    that.creditUseClear();\n    that.testTakerClear();\n    that.testResultClear();\n    that.testPendingClear(); // promise\n\n    Promise.all([that.getQuizzes(), that.getTestGivers(), that.getPackages()]).then(function (res) {\n      var quizzes = res[0].data;\n      var testgivers = res[1].data.testgivers;\n      var packages = res[2];\n      that.testgivers.results = testgivers;\n      that.testtakers.quizzes.items = quizzes;\n      that.testcredits.packages.items = packages;\n    })[\"catch\"](function (err) {\n      console.log('Error: ' + err);\n    });\n  },\n  methods: {\n    /**\r\n     * -----------------\r\n     * Test credit start\r\n     * -----------------\r\n     **/\n    // test taker search\n    getTestCredit: function getTestCredit() {\n      var that = this;\n      var url = that.testcredits.url.path.collection;\n\n      if (that.testgivers.testgiver != null) {\n        url += '?user_id=' + that.testgivers.testgiver.user_id;\n      }\n\n      axios.get(url).then(function (response) {\n        that.testcredits.total = response.data.total;\n      });\n    },\n    // test credit create\n    testCreditOpenCreateModal: function testCreditOpenCreateModal() {\n      jQuery('#testcredit-create').modal({\n        backdrop: 'static',\n        keyboard: false\n      });\n    },\n    testCreditCloseCreateModal: function testCreditCloseCreateModal() {\n      // hide test credit create\n      jQuery('#testcredit-create').modal('hide'); // reset test credit\n\n      this.testcredits.testcredit = {\n        user_id: '',\n        package_type: null,\n        credit: 0\n      }; // reset validator\n\n      this.$validator.reset(); // clear errors\n\n      this.errors.clear('testcredit');\n    },\n    testCreditCreate: function testCreditCreate() {\n      var that = this; // check testcredit package\n\n      if (that.testcredits.testcredit.package_type == null) {\n        // show notification\n        that.$bvToast.toast('Please fill up form', {\n          title: 'Message',\n          variant: 'danger',\n          solid: true\n        }); // return false\n\n        return false;\n      } // validate\n\n\n      that.$validator.validateAll('testcredit').then(function (result) {\n        if (result) {\n          // set test credit user id\n          if (that.testgivers.testgiver != null) {\n            // set test credit user id\n            that.testcredits.testcredit.user_id = that.testgivers.testgiver.user_id;\n          }\n\n          axios({\n            method: 'POST',\n            url: that.testcredits.url.path.collection,\n            data: that.testcredits.testcredit\n          }).then(function (res) {\n            // show notification\n            var content = res.data.content;\n            that.$bvToast.toast(content, {\n              title: 'Success',\n              variant: 'success',\n              solid: true\n            }); // hide submitting\n\n            that.testcredits.submitting = false; // update\n\n            that.getTestCredit(); // close modal\n\n            that.testCreditCloseCreateModal();\n          })[\"catch\"](function (err) {\n            // show notification\n            that.$bvToast.toast(err, {\n              title: 'Error',\n              variant: 'danger',\n              solid: true\n            }); // hide submitting\n\n            that.testcredits.submitting = false;\n          });\n        } else {\n          // hide submitting\n          that.testcredits.submitting = false;\n        }\n      })[\"catch\"](function (error) {\n        console.log(error);\n      });\n    },\n\n    /**\r\n     * -----------------\r\n     * Test credit end\r\n     * -----------------\r\n     **/\n\n    /**\r\n     * --------------------\r\n     * Test pending start\r\n     * --------------------\r\n     **/\n    // test pending search\n    testPendingClear: function testPendingClear() {\n      var that = this;\n      that.testpendings.query = {\n        keywords: '',\n        page: 1,\n        limit: parseInt(Settings['site.dashboard.length'])\n      };\n      that.testpendings.filters = {\n        form: {\n          plan: null\n        },\n        status: 0,\n        qs: ''\n      };\n      that.onTestPendingSearch();\n    },\n    onTestPendingSearch: function () {\n      var _onTestPendingSearch = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee2() {\n        var url, _yield$axios$get, data;\n\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                this.testpendings.loading = true;\n                this.testpendings.url.qs = 'q=' + encodeURIComponent(this.testpendings.query.keywords) + this.testpendings.filters.qs + '&p=' + this.testpendings.query.page + '&l=' + this.testpendings.query.limit + '';\n                url = this.testpendings.url.path.collection + '?' + this.testpendings.url.qs;\n                _context2.next = 6;\n                return axios.get(url);\n\n              case 6:\n                _yield$axios$get = _context2.sent;\n                data = _yield$axios$get.data;\n\n                if (data) {\n                  this.testpendings.results.rows = data.records;\n                  this.testpendings.results.total.records = data.pagination.records.total;\n                  this.testpendings.results.total.pages = data.pagination.pages.total;\n                }\n\n                _context2.next = 13;\n                break;\n\n              case 11:\n                _context2.prev = 11;\n                _context2.t0 = _context2[\"catch\"](0);\n\n              case 13:\n                _context2.prev = 13;\n                this.testpendings.loading = false;\n                return _context2.finish(13);\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 11, 13, 16]]);\n      }));\n\n      function onTestPendingSearch() {\n        return _onTestPendingSearch.apply(this, arguments);\n      }\n\n      return onTestPendingSearch;\n    }(),\n    testPendingTurn: function testPendingTurn() {\n      var that = this;\n      that.testpendings.url.qs = 'q=' + that.testpendings.query.keywords + that.testpendings.filters.qs + '&p=' + that.testpendings.query.page + '&l=' + that.testpendings.query.limit + '';\n      that.testpendings.loading = true;\n      axios.get(that.testpendings.url.path.collection + '?' + that.testpendings.url.qs).then(function (response) {\n        if (response.data != '') {\n          that.testpendings.results.rows = response.data.records;\n          that.testpendings.results.total.records = response.data.pagination.records.total;\n          that.testpendings.results.total.pages = response.data.pagination.pages.total;\n        }\n\n        that.testpendings.loading = false;\n      });\n    },\n\n    /**\r\n     * --------------------\r\n     * Test pending end\r\n     * --------------------\r\n     **/\n\n    /**\r\n     * -----------------\r\n     * Credit use start\r\n     * -----------------\r\n     **/\n    // credit use search\n    creditUseClear: function creditUseClear() {\n      var that = this;\n      that.credituse.query = {\n        keywords: '',\n        page: 1,\n        limit: parseInt(Settings['site.ipp.tabular'])\n      };\n      that.credituse.filters = {\n        form: {\n          plan: null\n        },\n        status: 0,\n        qs: ''\n      };\n      that.creditUseSearch();\n    },\n    creditUseSearch: function creditUseSearch() {\n      var that = this;\n      that.credituse.url.qs = 'q=' + that.credituse.query.keywords + that.credituse.filters.qs + '&p=' + that.credituse.query.page + '&l=' + that.credituse.query.limit + '';\n      that.credituse.loading = true;\n      var url = that.credituse.url.path.collection + '?' + that.credituse.url.qs;\n\n      if (that.testgivers.testgiver != null) {\n        url += '&user_id=' + that.testgivers.testgiver.user_id;\n      }\n\n      axios.get(url).then(function (response) {\n        that.credituse.results.rows = response.data.records;\n        that.credituse.results.total.records = response.data.pagination.records.total;\n        that.credituse.results.total.pages = response.data.pagination.pages.total;\n        that.credituse.loading = false;\n      });\n    },\n    creditUseTurn: function creditUseTurn() {\n      var that = this;\n      that.credituse.url.qs = 'q=' + that.credituse.query.keywords + that.credituse.filters.qs + '&p=' + that.credituse.query.page + '&l=' + that.credituse.query.limit + '';\n      that.credituse.loading = true;\n      axios.get(that.credituse.url.path.collection + '?' + that.credituse.url.qs).then(function (response) {\n        that.credituse.results.rows = response.data.records;\n        that.credituse.results.total.records = response.data.pagination.records.total;\n        that.credituse.results.total.pages = response.data.pagination.pages.total;\n        that.credituse.loading = false;\n      });\n    },\n\n    /**\r\n     * -----------------\r\n     * Credit use end\r\n     * -----------------\r\n     **/\n\n    /**\r\n     * -----------------\r\n     * Test giver start\r\n     * -----------------\r\n     **/\n    // get test givers\n    getTestGivers: function getTestGivers() {\n      var that = this;\n      return axios({\n        method: 'GET',\n        url: that.testgivers.url.path.collection\n      });\n    },\n    // test giver create\n    testGiverOpenCreateModal: function testGiverOpenCreateModal() {\n      jQuery('#testgiver-create').modal({\n        backdrop: 'static',\n        keyboard: false\n      });\n    },\n    onTestGiverCloseCreateModal: function onTestGiverCloseCreateModal() {\n      // hide test giver create\n      jQuery('#testgiver-create').modal('hide'); // reset test giver\n\n      this.testgivers.new_testgiver = {\n        firstname: '',\n        lastname: '',\n        email: ''\n      }; // reset validator\n\n      this.$validator.reset(); // clear errors\n\n      this.errors.clear('testgiver');\n      this.onTestTakerCloseCreateModal();\n    },\n    onCreateTestGiver: function () {\n      var _onCreateTestGiver = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee3() {\n        var message, result, _yield$axios, data, _yield$this$getTestGi, testgiverRes, content, title, variant;\n\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                message = {};\n                _context3.prev = 1;\n                this.validateTestgiver();\n                this.testgivers.submitting = true; // validate\n\n                _context3.next = 6;\n                return this.$validator.validateAll('testgiver');\n\n              case 6:\n                result = _context3.sent;\n\n                if (!result) {\n                  _context3.next = 22;\n                  break;\n                }\n\n                _context3.next = 10;\n                return axios({\n                  method: 'POST',\n                  url: this.testgivers.url.path.collection,\n                  data: this.testgivers.new_testgiver\n                });\n\n              case 10:\n                _yield$axios = _context3.sent;\n                data = _yield$axios.data;\n                // show notification\n                message.content = data.content;\n                message.title = 'Success';\n                message.variant = 'success'; // hide submitting\n                // update\n\n                _context3.next = 17;\n                return this.getTestGivers();\n\n              case 17:\n                _yield$this$getTestGi = _context3.sent;\n                testgiverRes = _yield$this$getTestGi.data;\n                this.testgivers.results = testgiverRes.testgivers; // close modal\n\n                _context3.next = 22;\n                return this.onTestGiverCloseCreateModal();\n\n              case 22:\n                _context3.next = 30;\n                break;\n\n              case 24:\n                _context3.prev = 24;\n                _context3.t0 = _context3[\"catch\"](1);\n                console.log(_context3.t0);\n                message.content = _context3.t0.toString();\n                message.title = 'Error';\n                message.variant = 'danger';\n\n              case 30:\n                _context3.prev = 30;\n                // show notification\n                content = message.content, title = message.title, variant = message.variant;\n\n                if (content) {\n                  this.$bvToast.toast(content, {\n                    title: title,\n                    variant: variant,\n                    solid: true\n                  });\n                }\n\n                this.testgivers.submitting = false;\n                return _context3.finish(30);\n\n              case 35:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[1, 24, 30, 35]]);\n      }));\n\n      function onCreateTestGiver() {\n        return _onCreateTestGiver.apply(this, arguments);\n      }\n\n      return onCreateTestGiver;\n    }(),\n\n    /**\r\n     * -----------------\r\n     * Test giver end\r\n     * -----------------\r\n     **/\n\n    /**\r\n     * ----------------\r\n     * Test taker start\r\n     * ----------------\r\n     **/\n    // test taker search\n    testTakerClear: function testTakerClear() {\n      var that = this;\n      that.testtakers.query = {\n        keywords: '',\n        page: 1,\n        limit: parseInt(Settings['site.ipp.tabular'])\n      };\n      that.testtakers.filters = {\n        form: {\n          plan: null\n        },\n        status: 0,\n        qs: ''\n      };\n      that.testTakerSearch();\n    },\n    testTakerSearch: function testTakerSearch() {\n      var that = this;\n      that.testtakers.url.qs = 'q=' + that.testtakers.query.keywords + that.testtakers.filters.qs + '&p=' + that.testtakers.query.page + '&l=' + that.testtakers.query.limit + '';\n      that.testtakers.loading = true;\n      var url = that.testtakers.url.path.collection + '?' + that.testtakers.url.qs;\n\n      if (that.testgivers.testgiver != null) {\n        url += '&user_id=' + that.testgivers.testgiver.user_id;\n      }\n\n      axios.get(url).then(function (response) {\n        that.testtakers.results.rows = response.data.records;\n        that.testtakers.results.total.records = response.data.pagination.records.total;\n        that.testtakers.results.total.pages = response.data.pagination.pages.total;\n        that.testtakers.loading = false;\n      });\n    },\n    testTakerturn: function testTakerturn() {\n      var that = this;\n      that.testtakers.url.qs = 'q=' + that.testtakers.query.keywords + that.testtakers.filters.qs + '&p=' + that.testtakers.query.page + '&l=' + that.testtakers.query.limit + '';\n      that.testtakers.loading = true;\n      axios.get(that.testtakers.url.path.collection + '?' + that.testtakers.url.qs).then(function (response) {\n        that.testtakers.results.rows = response.data.records;\n        that.testtakers.results.total.records = response.data.pagination.records.total;\n        that.testtakers.results.total.pages = response.data.pagination.pages.total;\n        that.testtakers.loading = false;\n      });\n    },\n    // test taker invitation\n    testTakerOpenSendQuizModal: function testTakerOpenSendQuizModal(entity) {\n      jQuery('#send-quiz').modal({\n        backdrop: 'static',\n        keyboard: false\n      });\n      this.testtakers.quiz_testtaker = entity;\n    },\n    assignQuizClose: function assignQuizClose() {\n      // hide test giver create\n      jQuery('#send-quiz').modal('hide'); // reset test giver\n\n      this.testtakers.quiz = '';\n    },\n    testTakersendQuiz: function testTakersendQuiz() {\n      var that = this; // check testtaker quiz\n\n      if (that.testtakers.quiz == null) {\n        that.$bvToast.toast('Please fill up form', {\n          title: 'Message',\n          variant: 'danger',\n          solid: true\n        });\n        return false;\n      } // construct url\n\n\n      var url = '/quizzes/quizzes/' + that.testtakers.quiz.id + '/invitations';\n      that.testtakers.submitting = true;\n      axios({\n        method: 'POST',\n        url: url,\n        data: {\n          addresses: that.testtakers.quiz_testtaker.email,\n          testgiver: that.testgivers.testgiver.user_id\n        }\n      }).then(function (response) {\n        // update\n        that.testTakerClear();\n        that.getTestCredit(); // hide modal\n\n        jQuery('#send-quiz').modal('hide');\n        that.testtakers.submitting = false; // show notification\n\n        that.$bvToast.toast('Invitation has been sent.', {\n          title: 'Message',\n          variant: 'success',\n          solid: true\n        });\n      })[\"catch\"](function (error) {\n        // show notification\n\n        /*that.$bvToast.toast(error.response.data.content, {\r\n            title: 'Error',\r\n            variant: 'danger',\r\n            solid: true\r\n        });*/\n        var status_code = error.response.status;\n\n        if (status_code == 400 || status_code == 500) {\n          error = error.response.data.content;\n\n          if (error == 'Quiz is already assigned to ' + that.testtakers.quiz_testtaker.email + '!') {\n            jQuery('#assigned-quiz').modal('show');\n          } else {\n            // show notification\n            that.$bvToast.toast(error, {\n              title: 'Error',\n              variant: 'danger',\n              solid: true\n            });\n          }\n        } // hide submitting\n\n\n        that.testtakers.submitting = false; // check error response data content\n\n        if (error.response.data.content == 'Insufficient credit balance!') {\n          // add some timeout\n          setTimeout(function () {\n            window.open('https://biometricedge.com/sign-up-now/');\n          }, 3000);\n        }\n      });\n    },\n    testTakersendQuizAgain: function testTakersendQuizAgain() {\n      var that = this; // construct url\n\n      var url = '/quizzes/quizzes/' + that.testtakers.quiz.id + '/invitations/assignquizagain';\n      that.testtakers.submitting = true;\n      axios({\n        method: 'POST',\n        url: url,\n        data: {\n          addresses: that.testtakers.quiz_testtaker.email,\n          testgiver: that.testgivers.testgiver.user_id\n        }\n      }).then(function (response) {\n        // update\n        that.testTakerClear();\n        that.getTestCredit(); // hide modal\n\n        jQuery('#send-quiz').modal('hide');\n        that.testtakers.submitting = false;\n        jQuery('#assigned-quiz').modal('hide'); // show notification\n\n        that.$bvToast.toast('Invitation has been sent.', {\n          title: 'Message',\n          variant: 'success',\n          solid: true\n        });\n      })[\"catch\"](function (error) {\n        var status_code = error.response.status; // check err status\n\n        if (status_code == 400 || status_code == 500) {\n          error = error.response.data.content;\n        } // show notification\n\n\n        that.$bvToast.toast(error, {\n          title: 'Error',\n          variant: 'danger',\n          solid: true\n        }); // hide submitting\n\n        that.testtakers.submitting = false; // check error response data content\n\n        if (error.response.data.content == 'Insufficient credit balance!') {\n          // add some timeout\n          setTimeout(function () {\n            window.open('https://biometricedge.com/sign-up-now/');\n          }, 3000);\n        }\n      });\n    },\n    // test taker create\n    testTakerOpenCreateModal: function testTakerOpenCreateModal() {\n      jQuery('#testtaker-create').modal({\n        backdrop: 'static',\n        keyboard: false\n      });\n    },\n    onTestTakerCloseCreateModal: function onTestTakerCloseCreateModal() {\n      // hide test taker create\n      jQuery('#testtaker-create').modal('hide'); // reset test taker\n\n      this.testtakers.testtaker = {\n        firstname: '',\n        lastname: '',\n        email: ''\n      }; // reset validator\n\n      this.$validator.reset(); // clear errors\n\n      this.errors.clear('testtaker');\n    },\n    onCreateTestTaker: function () {\n      var _onCreateTestTaker = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee4() {\n        var message, result, _yield$axios2, data, content, title, variant;\n\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                message = {};\n                _context4.prev = 1;\n                this.testtakers.submitting = true;\n                this.testtakerValidation();\n                _context4.next = 6;\n                return this.$validator.validateAll('testtaker');\n\n              case 6:\n                result = _context4.sent;\n\n                if (!result) {\n                  _context4.next = 19;\n                  break;\n                }\n\n                // set test credit user id\n                if (this.testgivers.testgiver != null) {\n                  // set test taker user id\n                  this.testtakers.testtaker.testgiver_user_id = this.testgivers.testgiver.user_id;\n                }\n\n                _context4.next = 11;\n                return axios({\n                  method: 'POST',\n                  url: this.testtakers.url.path.collection,\n                  data: this.testtakers.testtaker\n                });\n\n              case 11:\n                _yield$axios2 = _context4.sent;\n                data = _yield$axios2.data;\n                // show notification\n                message.content = data.content;\n                message.title = 'Success';\n                message.variant = 'success'; // hide submitting\n\n                this.testtakers.submitting = false; // update\n\n                this.testTakerSearch(); // close modal\n\n                this.onTestTakerCloseCreateModal();\n\n              case 19:\n                _context4.next = 26;\n                break;\n\n              case 21:\n                _context4.prev = 21;\n                _context4.t0 = _context4[\"catch\"](1);\n                // show notification\n                message.content = _context4.t0.toString();\n                message.variant = 'danger';\n                message.title = 'Error';\n\n              case 26:\n                _context4.prev = 26;\n                // show notification\n                content = message.content, title = message.title, variant = message.variant;\n\n                if (content) {\n                  this.$bvToast.toast(content, {\n                    title: title,\n                    variant: variant,\n                    solid: true\n                  });\n                }\n\n                this.testtakers.submitting = false;\n                return _context4.finish(26);\n\n              case 31:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[1, 21, 26, 31]]);\n      }));\n\n      function onCreateTestTaker() {\n        return _onCreateTestTaker.apply(this, arguments);\n      }\n\n      return onCreateTestTaker;\n    }(),\n\n    /**\r\n     * ----------------\r\n     * Test taker end\r\n     * ----------------\r\n     **/\n\n    /**\r\n     * ------------------\r\n     * Test result start\r\n     * ------------------\r\n     **/\n    // test result search\n    testResultClear: function testResultClear() {\n      var that = this;\n      that.testresults.query = {\n        keywords: '',\n        page: 1,\n        limit: parseInt(Settings['site.ipp.tabular'])\n      };\n      that.testresults.filters = {\n        form: {\n          plan: null\n        },\n        status: 0,\n        qs: ''\n      };\n      that.onTestResultSearch();\n    },\n    onTestResultSearch: function onTestResultSearch() {\n      var that = this;\n      that.testresults.url.qs = 'q=' + that.testresults.query.keywords + that.testresults.filters.qs + '&p=' + that.testresults.query.page + '&l=' + that.testresults.query.limit + '';\n      that.testresults.loading = true;\n      var url = that.testresults.url.path.collection + '?' + that.testresults.url.qs;\n\n      if (that.testgivers.testgiver != null) {\n        url += '&user_id=' + that.testgivers.testgiver.user_id;\n      }\n\n      axios.get(url).then(function (response) {\n        that.testresults.results.rows = response.data.records;\n        that.testresults.results.total.records = response.data.pagination.records.total;\n        that.testresults.results.total.pages = response.data.pagination.pages.total;\n        that.testresults.loading = false;\n      });\n    },\n    testResultTurn: function testResultTurn() {\n      var that = this;\n      that.testresults.url.qs = 'q=' + that.testresults.query.keywords + that.testresults.filters.qs + '&p=' + that.testresults.query.page + '&l=' + that.testresults.query.limit + '';\n      that.testresults.loading = true;\n      axios.get(that.testresults.url.path.collection + '?' + that.testresults.url.qs).then(function (response) {\n        that.testresults.results.rows = response.data.records;\n        that.testresults.results.total.records = response.data.pagination.records.total;\n        that.testresults.results.total.pages = response.data.pagination.pages.total;\n        that.testresults.loading = false;\n      });\n    },\n\n    /**\r\n     * ------------------\r\n     * Test result end\r\n     * ------------------\r\n     **/\n    // get packages\n    getPackages: function getPackages() {\n      return new Promise(function (resolve, reject) {\n        var packages = [{\n          name: 'Advance Package'\n        }, {\n          name: 'Elite Package'\n        }, {\n          name: '2 Exam Package'\n        }, {\n          name: 'Exam with 1 hour consulation'\n        }, {\n          name: 'Gift'\n        }];\n        resolve(packages);\n      });\n    },\n    // get quiezzes\n    getQuizzes: function getQuizzes() {\n      var that = this;\n      return axios({\n        method: 'GET',\n        url: that.testtakers.quizzes.url + '?l=0'\n      });\n    },\n    validateTestgiver: function validateTestgiver() {\n      var that = this;\n      this.$validator.extend('unique', {\n        getMessage: function getMessage(field, params, data) {\n          return data.error;\n        },\n        validate: function () {\n          var _validate2 = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee5(value, args) {\n            var params, ref;\n            return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee5$(_context5) {\n              while (1) {\n                switch (_context5.prev = _context5.next) {\n                  case 0:\n                    params = {\n                      field: args[0],\n                      value: value\n                    };\n                    _context5.next = 3;\n                    return axios.post('/register/exists', params);\n\n                  case 3:\n                    ref = _context5.sent;\n\n                    if (!(ref.data.result === false)) {\n                      _context5.next = 8;\n                      break;\n                    }\n\n                    return _context5.abrupt(\"return\", true);\n\n                  case 8:\n                    return _context5.abrupt(\"return\", {\n                      valid: false,\n                      data: {\n                        error: ref.data.message\n                      }\n                    });\n\n                  case 9:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }\n            }, _callee5);\n          }));\n\n          function validate(_x3, _x4) {\n            return _validate2.apply(this, arguments);\n          }\n\n          return validate;\n        }()\n      });\n    },\n    testtakerValidation: function testtakerValidation() {\n      var that = this;\n\n      if (that.testgivers.testgiver != null) {\n        // set test taker user id\n        that.testtakers.testtaker.testgiver_user_id = that.testgivers.testgiver.user_id;\n      }\n\n      this.$validator.extend('unique', {\n        getMessage: function getMessage(field, params, data) {\n          return data.error;\n        },\n        validate: function () {\n          var _validate3 = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee6(value, args) {\n            var params, ref;\n            return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee6$(_context6) {\n              while (1) {\n                switch (_context6.prev = _context6.next) {\n                  case 0:\n                    params = {\n                      field: args[0],\n                      value: value,\n                      data: that.testtakers.testtaker.testgiver_user_id\n                    };\n                    _context6.next = 3;\n                    return axios.post('/register/testtakerexist', params);\n\n                  case 3:\n                    ref = _context6.sent;\n\n                    if (!(ref.data.result === false)) {\n                      _context6.next = 8;\n                      break;\n                    }\n\n                    return _context6.abrupt(\"return\", true);\n\n                  case 8:\n                    return _context6.abrupt(\"return\", {\n                      valid: false,\n                      data: {\n                        error: ref.data.message\n                      }\n                    });\n\n                  case 9:\n                  case \"end\":\n                    return _context6.stop();\n                }\n              }\n            }, _callee6);\n          }));\n\n          function validate(_x5, _x6) {\n            return _validate3.apply(this, arguments);\n          }\n\n          return validate;\n        }()\n      });\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/components/home/admin.js\n");

/***/ }),

/***/ 63:
/*!*****************************************************!*\
  !*** multi ./resources/js/components/home/admin.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! F:\Project\laravel\quizemaster\code\resources\js\components\home\admin.js */"./resources/js/components/home/admin.js");


/***/ })

/******/ });