/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 18);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/js/components/admin/users/testtakers.js":
/*!***********************************************************!*\
  !*** ./resources/js/components/admin/users/testtakers.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\r\n * User Index Page\r\n **/\nnew Vue({\n  el: '#testtakers',\n  data: {\n    name: {\n      singular: 'User',\n      plural: 'Users'\n    },\n    url: {\n      path: {\n        collection: '/admin/users/' + window.quizmaster.user['id'] + '/testtakers/list',\n        resource: '/admin/users/' + window.quizmaster.user['id'] + '/testtakers'\n      },\n      qs: ''\n    },\n    loading: false,\n    submitting: false,\n    query: {\n      keywords: '',\n      page: 1,\n      limit: parseInt(Settings['site.ipp.tabular'])\n    },\n    results: {\n      rows: [],\n      total: {\n        records: 0,\n        pages: 0\n      }\n    },\n    testtakers_loading: false,\n    testtakers_url: {\n      path: '/admin/users/list?f[role_id]=' + window.quizmaster.testtaker.id + '&x[u]=' + window.quizmaster.user.id + '&',\n      qs: ''\n    },\n    testtakers_query: {\n      keywords: '',\n      page: 1,\n      limit: 10\n    },\n    testtakers_results: {\n      rows: [],\n      total: {\n        records: 0,\n        pages: 0\n      }\n    },\n    checkbox: {\n      ids: [],\n      all: false\n    },\n    user: {\n      id: '',\n      name: ''\n    }\n  },\n  methods: {\n    clear: function clear() {\n      this.query = {\n        keywords: '',\n        page: 1,\n        limit: parseInt(Settings['site.ipp.tabular'])\n      };\n      this.search();\n    },\n    search: function search() {\n      var that = this;\n      this.url.qs = 'q=' + this.query.keywords + '&p=' + this.query.page + '&l=' + this.query.limit + '';\n      that.loading = true;\n      axios.get(this.url.path.collection + '?' + this.url.qs).then(function (response) {\n        that.results.rows = response.data.records;\n        that.results.total.records = response.data.pagination.records.total;\n        that.results.total.pages = response.data.pagination.pages.total;\n        that.loading = false;\n      });\n    },\n    turn: function turn() {\n      var that = this;\n      this.url.qs = 'q=' + this.query.keywords + '&p=' + this.query.page + '&l=' + this.query.limit + '';\n      that.loading = true;\n      axios.get(this.url.path.collection + '?' + this.url.qs).then(function (response) {\n        that.results.rows = response.data.records;\n        that.results.total.records = response.data.pagination.records.total;\n        that.results.total.pages = response.data.pagination.pages.total;\n        that.loading = false;\n      });\n    },\n    testtakers_clear: function testtakers_clear() {\n      this.testtakers_query = {\n        keywords: '',\n        page: 1,\n        limit: 10\n      };\n      this.testtakers_search();\n    },\n    testtakers_search: function testtakers_search() {\n      var that = this;\n      this.testtakers_url.qs = 'q=' + this.testtakers_query.keywords + '&p=' + this.testtakers_query.page + '&l=' + this.testtakers_query.limit + '';\n      that.testtakers_loading = true;\n      axios.get(this.testtakers_url.path + this.testtakers_url.qs).then(function (response) {\n        that.testtakers_results.rows = response.data.records;\n        that.testtakers_results.total.records = response.data.pagination.records.total;\n        that.testtakers_results.total.pages = response.data.pagination.pages.total;\n        that.testtakers_loading = false;\n      });\n    },\n    testtakers_turn: function testtakers_turn() {\n      var that = this;\n      this.testtakers_url.qs = 'q=' + this.testtakers_query.keywords + '&p=' + this.testtakers_query.page + '&l=' + this.testtakers_query.limit + '';\n      that.testtakers_loading = true;\n      axios.get(this.testtakers_url.path + this.testtakers_url.qs).then(function (response) {\n        that.testtakers_results.rows = response.data.records;\n        that.testtakers_results.total.records = response.data.pagination.records.total;\n        that.testtakers_results.total.pages = response.data.pagination.pages.total;\n        that.testtakers_loading = false;\n      });\n    },\n    selectAll: function selectAll() {\n      this.checkbox.ids = [];\n\n      if (this.checkbox.all) {\n        for (var i in this.results.rows) {\n          this.checkbox.ids.push(this.results.rows[i].id);\n        }\n      }\n    },\n    select: function select() {\n      this.checkbox.all = false;\n    },\n    showTesttakerModal: function showTesttakerModal() {\n      jQuery('#entity-add').modal('show');\n      this.testtakers_clear();\n    },\n    addTesttaker: function addTesttaker(tid) {\n      var that = this;\n      axios({\n        method: 'POST',\n        url: that.url.path.resource,\n        data: {\n          tid: tid\n        }\n      }).then(function () {\n        that.clear();\n        that.$bvToast.toast(' Test Taker has been added.', {\n          title: 'Message',\n          variant: 'success',\n          solid: true\n        });\n      });\n    },\n    confirmRemove: function confirmRemove(user) {\n      this.user = user;\n      jQuery('#entity-remove').modal('show');\n    },\n    confirmRemoveSelected: function confirmRemoveSelected() {\n      jQuery('#entity-remove-selected').modal('show');\n    },\n    remove: function remove() {\n      var that = this;\n      axios({\n        method: 'DELETE',\n        url: this.url.path.resource + '/' + this.user.id\n      }).then(function () {\n        jQuery('#entity-remove').modal('hide');\n        that.search();\n        that.user = {\n          id: '',\n          name: ''\n        };\n        that.$bvToast.toast(that.name.singular + ' has been deleted.', {\n          title: 'Message',\n          variant: 'success',\n          solid: true\n        });\n      });\n    },\n    removeSelected: function removeSelected() {\n      var that = this;\n      axios({\n        method: 'DELETE',\n        url: this.url.path.resource,\n        data: {\n          tids: this.checkbox.ids\n        }\n      }).then(function () {\n        jQuery('#entity-remove-selected').modal('hide');\n        that.checkbox.ids = [];\n        that.search();\n        that.$bvToast.toast('Test takers has been deleted.', {\n          title: 'Message',\n          variant: 'success',\n          solid: true\n        });\n      });\n    }\n  },\n  watch: {\n    'checkbox.all': function checkboxAll() {\n      this.selectAll();\n    }\n  },\n  beforeMount: function beforeMount() {\n    this.clear();\n  },\n  mounted: function mounted() {\n    if (window.quizmaster.message != null) {\n      this.$bvToast.toast(window.quizmaster.message.content, {\n        title: 'Message',\n        variant: window.quizmaster.message.status,\n        solid: true\n      });\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hZG1pbi91c2Vycy90ZXN0dGFrZXJzLmpzP2M2NmYiXSwibmFtZXMiOlsiVnVlIiwiZWwiLCJkYXRhIiwibmFtZSIsInNpbmd1bGFyIiwicGx1cmFsIiwidXJsIiwicGF0aCIsImNvbGxlY3Rpb24iLCJ3aW5kb3ciLCJxdWl6bWFzdGVyIiwidXNlciIsInJlc291cmNlIiwicXMiLCJsb2FkaW5nIiwic3VibWl0dGluZyIsInF1ZXJ5Iiwia2V5d29yZHMiLCJwYWdlIiwibGltaXQiLCJwYXJzZUludCIsIlNldHRpbmdzIiwicmVzdWx0cyIsInJvd3MiLCJ0b3RhbCIsInJlY29yZHMiLCJwYWdlcyIsInRlc3R0YWtlcnNfbG9hZGluZyIsInRlc3R0YWtlcnNfdXJsIiwidGVzdHRha2VyIiwiaWQiLCJ0ZXN0dGFrZXJzX3F1ZXJ5IiwidGVzdHRha2Vyc19yZXN1bHRzIiwiY2hlY2tib3giLCJpZHMiLCJhbGwiLCJtZXRob2RzIiwiY2xlYXIiLCJzZWFyY2giLCJ0aGF0IiwiYXhpb3MiLCJnZXQiLCJ0aGVuIiwicmVzcG9uc2UiLCJwYWdpbmF0aW9uIiwidHVybiIsInRlc3R0YWtlcnNfY2xlYXIiLCJ0ZXN0dGFrZXJzX3NlYXJjaCIsInRlc3R0YWtlcnNfdHVybiIsInNlbGVjdEFsbCIsImkiLCJwdXNoIiwic2VsZWN0Iiwic2hvd1Rlc3R0YWtlck1vZGFsIiwialF1ZXJ5IiwibW9kYWwiLCJhZGRUZXN0dGFrZXIiLCJ0aWQiLCJtZXRob2QiLCIkYnZUb2FzdCIsInRvYXN0IiwidGl0bGUiLCJ2YXJpYW50Iiwic29saWQiLCJjb25maXJtUmVtb3ZlIiwiY29uZmlybVJlbW92ZVNlbGVjdGVkIiwicmVtb3ZlIiwicmVtb3ZlU2VsZWN0ZWQiLCJ0aWRzIiwid2F0Y2giLCJiZWZvcmVNb3VudCIsIm1vdW50ZWQiLCJtZXNzYWdlIiwiY29udGVudCIsInN0YXR1cyJdLCJtYXBwaW5ncyI6IkFBQUE7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QXhDO0FBRUFoQixZQUFJLENBQUNOLFFBQUwsQ0FBY0MsR0FBZCxHQUFvQixFQUFwQjtBQUNBSyxZQUFJLENBQUNELE1BQUw7QUFFQUMsWUFBSSxDQUFDb0IsUUFBTCxDQUFjQyxLQUFkLENBQW9CLCtCQUFwQixFQUFxRDtBQUNqREMsZUFBSyxFQUFFLFNBRDBDO0FBRWpEQyxpQkFBTyxFQUFFLFNBRndDO0FBR2pEQyxlQUFLLEVBQUU7QUFIMEMsU0FBckQ7QUFLSCxPQWpCRDtBQWtCSDtBQTNNSSxHQWpFTDtBQThRSk0sT0FBSyxFQUFFO0FBQ0gsb0JBQWdCLHVCQUFZO0FBQ3hCLFdBQUtwQixTQUFMO0FBQ0g7QUFIRSxHQTlRSDtBQW1SSnFCLGFBQVcsRUFBRSx1QkFBWTtBQUNyQixTQUFLakMsS0FBTDtBQUNILEdBclJHO0FBc1JKa0MsU0FBTyxFQUFFLG1CQUFZO0FBQ2pCLFFBQUk5RCxNQUFNLENBQUNDLFVBQVAsQ0FBa0I4RCxPQUFsQixJQUE2QixJQUFqQyxFQUF1QztBQUNuQyxXQUFLYixRQUFMLENBQWNDLEtBQWQsQ0FBb0JuRCxNQUFNLENBQUNDLFVBQVAsQ0FBa0I4RCxPQUFsQixDQUEwQkMsT0FBOUMsRUFBdUQ7QUFDbkRaLGFBQUssRUFBRSxTQUQ0QztBQUVuREMsZUFBTyxFQUFFckQsTUFBTSxDQUFDQyxVQUFQLENBQWtCOEQsT0FBbEIsQ0FBMEJFLE1BRmdCO0FBR25EWCxhQUFLLEVBQUU7QUFINEMsT0FBdkQ7QUFLSDtBQUNKO0FBOVJHLENBQVIiLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hZG1pbi91c2Vycy90ZXN0dGFrZXJzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIFVzZXIgSW5kZXggUGFnZVxyXG4gKiovXHJcblxyXG5uZXcgVnVlKHtcclxuICAgIGVsOiAnI3Rlc3R0YWtlcnMnLFxyXG4gICAgZGF0YToge1xyXG4gICAgICAgIG5hbWU6IHtcclxuICAgICAgICAgICAgc2luZ3VsYXI6ICdVc2VyJyxcclxuICAgICAgICAgICAgcGx1cmFsOiAnVXNlcnMnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdXJsOiB7XHJcbiAgICAgICAgICAgIHBhdGg6IHtcclxuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb246XHJcbiAgICAgICAgICAgICAgICAgICAgJy9hZG1pbi91c2Vycy8nICtcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cucXVpem1hc3Rlci51c2VyWydpZCddICtcclxuICAgICAgICAgICAgICAgICAgICAnL3Rlc3R0YWtlcnMvbGlzdCcsXHJcbiAgICAgICAgICAgICAgICByZXNvdXJjZTpcclxuICAgICAgICAgICAgICAgICAgICAnL2FkbWluL3VzZXJzLycgK1xyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5xdWl6bWFzdGVyLnVzZXJbJ2lkJ10gK1xyXG4gICAgICAgICAgICAgICAgICAgICcvdGVzdHRha2VycycsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHFzOiAnJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGxvYWRpbmc6IGZhbHNlLFxyXG4gICAgICAgIHN1Ym1pdHRpbmc6IGZhbHNlLFxyXG4gICAgICAgIHF1ZXJ5OiB7XHJcbiAgICAgICAgICAgIGtleXdvcmRzOiAnJyxcclxuICAgICAgICAgICAgcGFnZTogMSxcclxuICAgICAgICAgICAgbGltaXQ6IHBhcnNlSW50KFNldHRpbmdzWydzaXRlLmlwcC50YWJ1bGFyJ10pLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcmVzdWx0czoge1xyXG4gICAgICAgICAgICByb3dzOiBbXSxcclxuICAgICAgICAgICAgdG90YWw6IHtcclxuICAgICAgICAgICAgICAgIHJlY29yZHM6IDAsXHJcbiAgICAgICAgICAgICAgICBwYWdlczogMCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHRlc3R0YWtlcnNfbG9hZGluZzogZmFsc2UsXHJcbiAgICAgICAgdGVzdHRha2Vyc191cmw6IHtcclxuICAgICAgICAgICAgcGF0aDpcclxuICAgICAgICAgICAgICAgICcvYWRtaW4vdXNlcnMvbGlzdD9mW3JvbGVfaWRdPScgK1xyXG4gICAgICAgICAgICAgICAgd2luZG93LnF1aXptYXN0ZXIudGVzdHRha2VyLmlkICtcclxuICAgICAgICAgICAgICAgICcmeFt1XT0nICtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5xdWl6bWFzdGVyLnVzZXIuaWQgK1xyXG4gICAgICAgICAgICAgICAgJyYnLFxyXG4gICAgICAgICAgICBxczogJycsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB0ZXN0dGFrZXJzX3F1ZXJ5OiB7XHJcbiAgICAgICAgICAgIGtleXdvcmRzOiAnJyxcclxuICAgICAgICAgICAgcGFnZTogMSxcclxuICAgICAgICAgICAgbGltaXQ6IDEwLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdGVzdHRha2Vyc19yZXN1bHRzOiB7XHJcbiAgICAgICAgICAgIHJvd3M6IFtdLFxyXG4gICAgICAgICAgICB0b3RhbDoge1xyXG4gICAgICAgICAgICAgICAgcmVjb3JkczogMCxcclxuICAgICAgICAgICAgICAgIHBhZ2VzOiAwLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY2hlY2tib3g6IHtcclxuICAgICAgICAgICAgaWRzOiBbXSxcclxuICAgICAgICAgICAgYWxsOiBmYWxzZSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHVzZXI6IHtcclxuICAgICAgICAgICAgaWQ6ICcnLFxyXG4gICAgICAgICAgICBuYW1lOiAnJyxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIG1ldGhvZHM6IHtcclxuICAgICAgICBjbGVhcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLnF1ZXJ5ID0ge1xyXG4gICAgICAgICAgICAgICAga2V5d29yZHM6ICcnLFxyXG4gICAgICAgICAgICAgICAgcGFnZTogMSxcclxuICAgICAgICAgICAgICAgIGxpbWl0OiBwYXJzZUludChTZXR0aW5nc1snc2l0ZS5pcHAudGFidWxhciddKSxcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5zZWFyY2goKVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2VhcmNoOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpc1xyXG4gICAgICAgICAgICB0aGlzLnVybC5xcyA9XHJcbiAgICAgICAgICAgICAgICAncT0nICtcclxuICAgICAgICAgICAgICAgIHRoaXMucXVlcnkua2V5d29yZHMgK1xyXG4gICAgICAgICAgICAgICAgJyZwPScgK1xyXG4gICAgICAgICAgICAgICAgdGhpcy5xdWVyeS5wYWdlICtcclxuICAgICAgICAgICAgICAgICcmbD0nICtcclxuICAgICAgICAgICAgICAgIHRoaXMucXVlcnkubGltaXQgK1xyXG4gICAgICAgICAgICAgICAgJydcclxuICAgICAgICAgICAgdGhhdC5sb2FkaW5nID0gdHJ1ZVxyXG5cclxuICAgICAgICAgICAgYXhpb3NcclxuICAgICAgICAgICAgICAgIC5nZXQodGhpcy51cmwucGF0aC5jb2xsZWN0aW9uICsgJz8nICsgdGhpcy51cmwucXMpXHJcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LnJlc3VsdHMucm93cyA9IHJlc3BvbnNlLmRhdGEucmVjb3Jkc1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQucmVzdWx0cy50b3RhbC5yZWNvcmRzID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuZGF0YS5wYWdpbmF0aW9uLnJlY29yZHMudG90YWxcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LnJlc3VsdHMudG90YWwucGFnZXMgPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5kYXRhLnBhZ2luYXRpb24ucGFnZXMudG90YWxcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5sb2FkaW5nID0gZmFsc2VcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSxcclxuICAgICAgICB0dXJuOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpc1xyXG4gICAgICAgICAgICB0aGlzLnVybC5xcyA9XHJcbiAgICAgICAgICAgICAgICAncT0nICtcclxuICAgICAgICAgICAgICAgIHRoaXMucXVlcnkua2V5d29yZHMgK1xyXG4gICAgICAgICAgICAgICAgJyZwPScgK1xyXG4gICAgICAgICAgICAgICAgdGhpcy5xdWVyeS5wYWdlICtcclxuICAgICAgICAgICAgICAgICcmbD0nICtcclxuICAgICAgICAgICAgICAgIHRoaXMucXVlcnkubGltaXQgK1xyXG4gICAgICAgICAgICAgICAgJydcclxuICAgICAgICAgICAgdGhhdC5sb2FkaW5nID0gdHJ1ZVxyXG5cclxuICAgICAgICAgICAgYXhpb3NcclxuICAgICAgICAgICAgICAgIC5nZXQodGhpcy51cmwucGF0aC5jb2xsZWN0aW9uICsgJz8nICsgdGhpcy51cmwucXMpXHJcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LnJlc3VsdHMucm93cyA9IHJlc3BvbnNlLmRhdGEucmVjb3Jkc1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQucmVzdWx0cy50b3RhbC5yZWNvcmRzID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuZGF0YS5wYWdpbmF0aW9uLnJlY29yZHMudG90YWxcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LnJlc3VsdHMudG90YWwucGFnZXMgPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5kYXRhLnBhZ2luYXRpb24ucGFnZXMudG90YWxcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5sb2FkaW5nID0gZmFsc2VcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgdGVzdHRha2Vyc19jbGVhcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLnRlc3R0YWtlcnNfcXVlcnkgPSB7XHJcbiAgICAgICAgICAgICAgICBrZXl3b3JkczogJycsXHJcbiAgICAgICAgICAgICAgICBwYWdlOiAxLFxyXG4gICAgICAgICAgICAgICAgbGltaXQ6IDEwLFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnRlc3R0YWtlcnNfc2VhcmNoKClcclxuICAgICAgICB9LFxyXG4gICAgICAgIHRlc3R0YWtlcnNfc2VhcmNoOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGxldCB0aGF0ID0gdGhpc1xyXG4gICAgICAgICAgICB0aGlzLnRlc3R0YWtlcnNfdXJsLnFzID1cclxuICAgICAgICAgICAgICAgICdxPScgK1xyXG4gICAgICAgICAgICAgICAgdGhpcy50ZXN0dGFrZXJzX3F1ZXJ5LmtleXdvcmRzICtcclxuICAgICAgICAgICAgICAgICcmcD0nICtcclxuICAgICAgICAgICAgICAgIHRoaXMudGVzdHRha2Vyc19xdWVyeS5wYWdlICtcclxuICAgICAgICAgICAgICAgICcmbD0nICtcclxuICAgICAgICAgICAgICAgIHRoaXMudGVzdHRha2Vyc19xdWVyeS5saW1pdCArXHJcbiAgICAgICAgICAgICAgICAnJ1xyXG4gICAgICAgICAgICB0aGF0LnRlc3R0YWtlcnNfbG9hZGluZyA9IHRydWVcclxuXHJcbiAgICAgICAgICAgIGF4aW9zXHJcbiAgICAgICAgICAgICAgICAuZ2V0KHRoaXMudGVzdHRha2Vyc191cmwucGF0aCArIHRoaXMudGVzdHRha2Vyc191cmwucXMpXHJcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LnRlc3R0YWtlcnNfcmVzdWx0cy5yb3dzID0gcmVzcG9uc2UuZGF0YS5yZWNvcmRzXHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC50ZXN0dGFrZXJzX3Jlc3VsdHMudG90YWwucmVjb3JkcyA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmRhdGEucGFnaW5hdGlvbi5yZWNvcmRzLnRvdGFsXHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC50ZXN0dGFrZXJzX3Jlc3VsdHMudG90YWwucGFnZXMgPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5kYXRhLnBhZ2luYXRpb24ucGFnZXMudG90YWxcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC50ZXN0dGFrZXJzX2xvYWRpbmcgPSBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICB9LFxyXG4gICAgICAgIHRlc3R0YWtlcnNfdHVybjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBsZXQgdGhhdCA9IHRoaXNcclxuICAgICAgICAgICAgdGhpcy50ZXN0dGFrZXJzX3VybC5xcyA9XHJcbiAgICAgICAgICAgICAgICAncT0nICtcclxuICAgICAgICAgICAgICAgIHRoaXMudGVzdHRha2Vyc19xdWVyeS5rZXl3b3JkcyArXHJcbiAgICAgICAgICAgICAgICAnJnA9JyArXHJcbiAgICAgICAgICAgICAgICB0aGlzLnRlc3R0YWtlcnNfcXVlcnkucGFnZSArXHJcbiAgICAgICAgICAgICAgICAnJmw9JyArXHJcbiAgICAgICAgICAgICAgICB0aGlzLnRlc3R0YWtlcnNfcXVlcnkubGltaXQgK1xyXG4gICAgICAgICAgICAgICAgJydcclxuICAgICAgICAgICAgdGhhdC50ZXN0dGFrZXJzX2xvYWRpbmcgPSB0cnVlXHJcblxyXG4gICAgICAgICAgICBheGlvc1xyXG4gICAgICAgICAgICAgICAgLmdldCh0aGlzLnRlc3R0YWtlcnNfdXJsLnBhdGggKyB0aGlzLnRlc3R0YWtlcnNfdXJsLnFzKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC50ZXN0dGFrZXJzX3Jlc3VsdHMucm93cyA9IHJlc3BvbnNlLmRhdGEucmVjb3Jkc1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQudGVzdHRha2Vyc19yZXN1bHRzLnRvdGFsLnJlY29yZHMgPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5kYXRhLnBhZ2luYXRpb24ucmVjb3Jkcy50b3RhbFxyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQudGVzdHRha2Vyc19yZXN1bHRzLnRvdGFsLnBhZ2VzID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuZGF0YS5wYWdpbmF0aW9uLnBhZ2VzLnRvdGFsXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQudGVzdHRha2Vyc19sb2FkaW5nID0gZmFsc2VcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2VsZWN0QWxsOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tib3guaWRzID0gW11cclxuICAgICAgICAgICAgaWYgKHRoaXMuY2hlY2tib3guYWxsKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpIGluIHRoaXMucmVzdWx0cy5yb3dzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGVja2JveC5pZHMucHVzaCh0aGlzLnJlc3VsdHMucm93c1tpXS5pZClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2VsZWN0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tib3guYWxsID0gZmFsc2VcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzaG93VGVzdHRha2VyTW9kYWw6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgalF1ZXJ5KCcjZW50aXR5LWFkZCcpLm1vZGFsKCdzaG93JylcclxuICAgICAgICAgICAgdGhpcy50ZXN0dGFrZXJzX2NsZWFyKClcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFkZFRlc3R0YWtlcjogZnVuY3Rpb24gKHRpZCkge1xyXG4gICAgICAgICAgICBsZXQgdGhhdCA9IHRoaXNcclxuICAgICAgICAgICAgYXhpb3Moe1xyXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgICAgICAgICB1cmw6IHRoYXQudXJsLnBhdGgucmVzb3VyY2UsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGlkOiB0aWQsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHRoYXQuY2xlYXIoKVxyXG4gICAgICAgICAgICAgICAgdGhhdC4kYnZUb2FzdC50b2FzdCgnIFRlc3QgVGFrZXIgaGFzIGJlZW4gYWRkZWQuJywge1xyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnTWVzc2FnZScsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyaWFudDogJ3N1Y2Nlc3MnLFxyXG4gICAgICAgICAgICAgICAgICAgIHNvbGlkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBjb25maXJtUmVtb3ZlOiBmdW5jdGlvbiAodXNlcikge1xyXG4gICAgICAgICAgICB0aGlzLnVzZXIgPSB1c2VyXHJcbiAgICAgICAgICAgIGpRdWVyeSgnI2VudGl0eS1yZW1vdmUnKS5tb2RhbCgnc2hvdycpXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb25maXJtUmVtb3ZlU2VsZWN0ZWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgalF1ZXJ5KCcjZW50aXR5LXJlbW92ZS1zZWxlY3RlZCcpLm1vZGFsKCdzaG93JylcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbGV0IHRoYXQgPSB0aGlzXHJcblxyXG4gICAgICAgICAgICBheGlvcyh7XHJcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdERUxFVEUnLFxyXG4gICAgICAgICAgICAgICAgdXJsOiB0aGlzLnVybC5wYXRoLnJlc291cmNlICsgJy8nICsgdGhpcy51c2VyLmlkLFxyXG4gICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGpRdWVyeSgnI2VudGl0eS1yZW1vdmUnKS5tb2RhbCgnaGlkZScpXHJcblxyXG4gICAgICAgICAgICAgICAgdGhhdC5zZWFyY2goKVxyXG5cclxuICAgICAgICAgICAgICAgIHRoYXQudXNlciA9IHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJycsXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhhdC4kYnZUb2FzdC50b2FzdCh0aGF0Lm5hbWUuc2luZ3VsYXIgKyAnIGhhcyBiZWVuIGRlbGV0ZWQuJywge1xyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnTWVzc2FnZScsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyaWFudDogJ3N1Y2Nlc3MnLFxyXG4gICAgICAgICAgICAgICAgICAgIHNvbGlkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlbW92ZVNlbGVjdGVkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGxldCB0aGF0ID0gdGhpc1xyXG5cclxuICAgICAgICAgICAgYXhpb3Moe1xyXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnREVMRVRFJyxcclxuICAgICAgICAgICAgICAgIHVybDogdGhpcy51cmwucGF0aC5yZXNvdXJjZSxcclxuICAgICAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgICAgICB0aWRzOiB0aGlzLmNoZWNrYm94LmlkcyxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgalF1ZXJ5KCcjZW50aXR5LXJlbW92ZS1zZWxlY3RlZCcpLm1vZGFsKCdoaWRlJylcclxuXHJcbiAgICAgICAgICAgICAgICB0aGF0LmNoZWNrYm94LmlkcyA9IFtdXHJcbiAgICAgICAgICAgICAgICB0aGF0LnNlYXJjaCgpXHJcblxyXG4gICAgICAgICAgICAgICAgdGhhdC4kYnZUb2FzdC50b2FzdCgnVGVzdCB0YWtlcnMgaGFzIGJlZW4gZGVsZXRlZC4nLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdNZXNzYWdlJyxcclxuICAgICAgICAgICAgICAgICAgICB2YXJpYW50OiAnc3VjY2VzcycsXHJcbiAgICAgICAgICAgICAgICAgICAgc29saWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgd2F0Y2g6IHtcclxuICAgICAgICAnY2hlY2tib3guYWxsJzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdEFsbCgpXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbiAgICBiZWZvcmVNb3VudDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuY2xlYXIoKVxyXG4gICAgfSxcclxuICAgIG1vdW50ZWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAod2luZG93LnF1aXptYXN0ZXIubWVzc2FnZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJGJ2VG9hc3QudG9hc3Qod2luZG93LnF1aXptYXN0ZXIubWVzc2FnZS5jb250ZW50LCB7XHJcbiAgICAgICAgICAgICAgICB0aXRsZTogJ01lc3NhZ2UnLFxyXG4gICAgICAgICAgICAgICAgdmFyaWFudDogd2luZG93LnF1aXptYXN0ZXIubWVzc2FnZS5zdGF0dXMsXHJcbiAgICAgICAgICAgICAgICBzb2xpZDogdHJ1ZSxcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG59KVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/components/admin/users/testtakers.js\n");

/***/ }),

/***/ 18:
/*!*****************************************************************!*\
  !*** multi ./resources/js/components/admin/users/testtakers.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! F:\Project\laravel\quizemaster\code\resources\js\components\admin\users\testtakers.js */"./resources/js/components/admin/users/testtakers.js");


/***/ })

/******/ });